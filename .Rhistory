#coeffs<-lm(den.log~pop.log,data=dat.both)$coefficients
#coeffs.rev<-lm(pop.log~den.log,data=dat.both)$coefficients
#slope.rev<-1/coeffs.rev[2]
#intercept.rev<- (-coeffs.rev[1])/coeffs.rev[2]
#g<-g + geom_abline(slope=coeffs[2],intercept=coeffs[1],color="blue")
#g<-g +  geom_abline(slope=slope.rev,intercept=intercept.rev, color="orange")
#g
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(ggplot2)
# We load our datasets, clean them and join them into a single dataframe, for easier handling
Tot_Pop <- read.csv("./TotalPopulation1960to2020.csv")
Tot_Pop$DATE <- as.numeric(format(as.Date(Tot_Pop$DATE), "%Y"))
CPI <- read.csv("./FPCPITOTLZGUSA.csv")
CPI$DATE <- as.numeric(format(as.Date(CPI$DATE), "%Y"))
crimes <- read.csv("./crimes.csv")
names(crimes)[11] = "Larceny theft"
names(crimes)[12] = "Vehicle theft"
crimes <- filter(crimes,Year <= 2015)
Tot_Pop <- filter(Tot_Pop,DATE <= 2015)
CPI <- filter(CPI,DATE <= 2015)
# Rape statistics cannot be trusted, as prior to 2016, the FBI included only female-reported rapes, and from 2016 and forward, they included both male and female reported rapes.
# Therefore, we cannot use it for our analysis, as it shows a massive jump in reports.
dat <- cbind(CPI, Tot_Pop$POPTOTUSA647NWDB, crimes[,3:ncol(crimes)])
# Now we can remove the original datasets to avoid memory issues
rm(CPI)
rm(Tot_Pop)
rm(crimes)
# We rename some columns for easier handling
names(dat)[1:3] = c("Date", "CPI", "Tot_Pop")
# Now, we get additional derived metrics which might be helpful
inf_rate <- dat$CPI[2:nrow(dat)] - dat$CPI[1:nrow(dat)-1]
inf_rate <- inf_rate / dat$CPI[1:nrow(dat)-1]
inf_rate <- inf_rate * 100
inf_rate <- c(mean(inf_rate), inf_rate)
crime_percentage <- dat$Total/dat$Tot_Pop * 100
dat <- cbind(dat, inf_rate, crime_percentage)
# Finally, we should remove outliers. For example, inflation for most years stays within 100%, except for some years, in which inflation reached over 500%.
mean_inf_rate <- mean(dat$inf_rate)
sd_inf_rate <- sd(dat$inf_rate)
# We will use only data that is within 3 standard deviations for the inflation rate
dat <- filter(dat, between(inf_rate, -3*sd_inf_rate, 3*sd_inf_rate))
head(dat)
# With the previously obtained information, we can visualize tot_crime vs inflation
#ggplot(data= dat, mapping = aes(x = inf_rate, y = Total))+
#  geom_point()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Total))+
geom_hline(yintercept = min(dat$Total),color="gray")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = crime_percentage))+
geom_hline(yintercept = min(dat$crime_percentage),color="gray")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Property))+
geom_hline(yintercept = min(dat$Property),color="gray")+
geom_vline(xintercept = mean(dat$inf_rate),color="red")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Property/Total))+
geom_hline(yintercept = min(dat$Property / dat$Total),color="gray")+
geom_line()
#coeffs<-lm(den.log~pop.log,data=dat.both)$coefficients
#coeffs.rev<-lm(pop.log~den.log,data=dat.both)$coefficients
#slope.rev<-1/coeffs.rev[2]
#intercept.rev<- (-coeffs.rev[1])/coeffs.rev[2]
#g<-g + geom_abline(slope=coeffs[2],intercept=coeffs[1],color="blue")
#g<-g +  geom_abline(slope=slope.rev,intercept=intercept.rev, color="orange")
#g
coeffs <- lm(crime_percentage~inf_rate)
coeffs
coeffs <- lm(crime_percentage~inf_rate)$coefficients
g <- ggplot(data= dat, mapping = aes(x = inf_rate, y = crime_percentage))
g<-g +  geom_abline(slope=1/coeffs[2],intercept=(-coeffs.rev[1])/coeffs.rev[2], color="orange")
g<-g +  geom_abline(slope=1/coeffs[2],intercept=(-coeffs[1])/coeffs[2], color="orange")
g
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(ggplot2)
# We load our datasets, clean them and join them into a single dataframe, for easier handling
Tot_Pop <- read.csv("./TotalPopulation1960to2020.csv")
Tot_Pop$DATE <- as.numeric(format(as.Date(Tot_Pop$DATE), "%Y"))
CPI <- read.csv("./FPCPITOTLZGUSA.csv")
CPI$DATE <- as.numeric(format(as.Date(CPI$DATE), "%Y"))
crimes <- read.csv("./crimes.csv")
names(crimes)[11] = "Larceny theft"
names(crimes)[12] = "Vehicle theft"
crimes <- filter(crimes,Year <= 2019)
Tot_Pop <- filter(Tot_Pop,DATE <= 2019)
CPI <- filter(CPI,DATE <= 2019)
dat <- cbind(CPI, Tot_Pop$POPTOTUSA647NWDB, crimes[,3:ncol(crimes)])
# Now we can remove the original datasets to avoid memory issues
rm(CPI)
rm(Tot_Pop)
rm(crimes)
# We rename some columns for easier handling
names(dat)[1:3] = c("Date", "CPI", "Tot_Pop")
# Now, we get additional derived metrics which might be helpful
inf_rate <- (dat$CPI)
crime_percentage <- dat$Total/dat$Tot_Pop * 100
dat <- cbind(dat, inf_rate, crime_percentage)
# Finally, we should remove outliers. For example, inflation for most years stays within 100%, except for some years, in which inflation reached over 500%.
mean_inf_rate <- mean(dat$inf_rate)
sd_inf_rate <- sd(dat$inf_rate)
# We will use only data that is within 3 standard deviations for the inflation rate
dat <- filter(dat, between(inf_rate, -3*sd_inf_rate, 3*sd_inf_rate))
head(dat, n = 5)
CPI_Plot <- ggplot(dat, aes(x = Date, y = CPI)) +
geom_line() +
labs(title = "Consumer Price Index Change", x = "Year", y = "CPI")
Property_Plot <- ggplot(dat, aes(x = Date, y = Property)) +
geom_line() +
labs(title = "Property Crime Over Time", x = "Year", y = "Number of Property Incidents")
Murder_Plot <- ggplot(dat, aes(x = Date, y = Murder)) +
geom_line() +
labs(title = "Murder Over Time", x = "Year", y = "Number of Murder Incidents")
Violent_Plot <- ggplot(dat, aes(x = Date, y = Violent)) +
geom_line() +
labs(title = "Violent Crime Over Time", x = "Year", y = "Number of Violebt Incidents")
Burglary_Plot <- ggplot(dat, aes(x = Date, y = Burglary)) +
geom_line() +
labs(title = "Burglary Over Time", x = "Year", y = "Total Number of Burglary Incidents")
Total_Plot <- ggplot(dat, aes(x = Date, y = Total)) +
geom_line() +
labs(title = "Total Crime Over Time", x = "Year", y = "Total Number of Incidents")
CPI_Plot
Property_Plot
Violent_Plot
Murder_Plot
Burglary_Plot
Total_Plot
# With the previously obtained information, we can visualize tot_crime vs inflation
#ggplot(data= dat, mapping = aes(x = inf_rate, y = Total))+
#  geom_point()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Total))+
geom_hline(yintercept = min(dat$Total),color="gray")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = crime_percentage))+
geom_hline(yintercept = min(dat$crime_percentage),color="gray")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Property))+
geom_hline(yintercept = min(dat$Property),color="gray")+
geom_vline(xintercept = mean(dat$inf_rate),color="red")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Property/Total))+
geom_hline(yintercept = min(dat$Property / dat$Total),color="gray")+
geom_line()
qqnorm(dat$CPI)
qqline(dat$CPI)
qqnorm(dat$Total)
qqline(dat$Total)
qqnorm(dat$Property)
qqline(dat$Property)
qqnorm(dat$Violent)
qqline(dat$Violent)
qqnorm(dat$Murder)
qqline(dat$Murder)
#Pearson Correlations with Raw Data
cor.test(dat$inf_rate, dat$Total)
cor.test(dat$inf_rate, dat$Property)
cor.test(dat$inf_rate, dat$Murder)
cor.test(dat$inf_rate, dat$Violent)
cor.test(dat$inf_rate, dat$Burglary)
convert_to_per_capita <- function(data) {
# Find the column index for the "Tot_Pop" column
pop_col <- grep("Tot_Pop", colnames(data))
# If no "Tot_Pop" column is found, return the original data
if (length(pop_col) == 0) {
return(data)
}
# Divide all columns after "Tot_Pop" by population and multiply by 100,000
for (i in (pop_col+1):ncol(data)) {
data[, i] <- (data[, i] / data[, pop_col]) * 100000
}
return(data)
}
dat_converted <- convert_to_per_capita(dat)
dat_converted
cor.test(dat$inf_rate, dat_converted$Total)
cor.test(dat$inf_rate, dat_converted$Property)
cor.test(dat$inf_rate, dat_converted$Murder)
cor.test(dat$inf_rate, dat_converted$Violent)
cor.test(dat$inf_rate, dat_converted$Burglary)
# Load the vars package
library(lmtest)
library(vars)
# Create a dataframe with the two variables
data <- data.frame(inf_rate = c(1.5, 2.0, 2.5, 2.2, 2.8),
property_crime = c(100, 120, 110, 115, 130))
# Specify the variables as a VAR model
model <- VAR(dat_converted, p = 2, type = "const")
grangertest(inf_rate ~ Property, order = 3, data = dat_converted)
grangertest(inf_rate ~ Burglary, order = 3, data = dat_converted)
grangertest(inf_rate ~ Total, order = 3, data = dat)
dat_converted
#Prophet requires the data to be formatted in a certain way.
library(lubridate)
#Create formatted dataframes for making predictions
df_model1 <- dat_converted[, c('Date', 'CPI', 'Property')]
colnames(df_model1) <- c('ds', 'CPI', 'y')
df_model1$ds <- as.Date(paste0(df_model1$ds, "-01-01"), format = "%Y-%m-%d")
df_model2 <- dat_converted[, c('Date', 'CPI', 'Total')]
colnames(df_model2) <- c('ds', 'CPI', 'y')
df_model2$ds <- as.Date(paste0(df_model2$ds, "-01-01"), format = "%Y-%m-%d")
library (prophet)
model <- prophet()
#Use CPI as a regressor
model <- add_regressor(model, 'CPI')
model <- fit.prophet(model, df_model1)
future <- make_future_dataframe(model, periods = 9, freq = 'years')
future$CPI <- c(1.2, 7.0, 6.9, 5.0, 3.0, 4.0, 1.0, 0.2)
forecast <- predict(model, future)
forecast
plot(model, forecast)
model <- prophet()
# add CPI as a regressor
model <- add_regressor(model, 'CPI')
model <- fit.prophet(model, df_model2)
future <- make_future_dataframe(model, periods = 9, freq = 'years')
future$CPI <- c(1.2, 7.0, 6.9, 5.0, 3.0, 4.0, 6.0, 7.2)
forecast <- predict(model, future)
forecast
plot(model, forecast)
# Load the vars package
library(vars)
library(lubridate)
library(dplyr)
library (forecast)
property_inf <- dat_converted[, c("Property", "CPI")]
model_inf <- VAR(property_inf, p = 3, type = "const")
forecast_inf <- predict(model_inf, n.ahead = 3, newdata = data.frame(inf_rate = c(1.0, 3.1, 7)))
forecast_inf
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(ggplot2)
# Load the vars package
library(lmtest)
library(vars)
# Required for the data format for prophet
library(lubridate)
library (prophet)
# Load the vars package
library(dplyr)
library (forecast)
# We load our datasets, clean them and join them into a single dataframe, for easier handling
Tot_Pop <- read.csv("./TotalPopulation1960to2020.csv")
Tot_Pop$DATE <- as.numeric(format(as.Date(Tot_Pop$DATE), "%Y"))
CPI <- read.csv("./FPCPITOTLZGUSA.csv")
CPI$DATE <- as.numeric(format(as.Date(CPI$DATE), "%Y"))
crimes <- read.csv("./crimes.csv")
names(crimes)[11] = "Larceny theft"
names(crimes)[12] = "Vehicle theft"
crimes <- filter(crimes,Year <= 2019)
Tot_Pop <- filter(Tot_Pop,DATE <= 2019)
CPI <- filter(CPI,DATE <= 2019)
dat <- cbind(CPI, Tot_Pop$POPTOTUSA647NWDB, crimes[,3:ncol(crimes)])
# Now we can remove the original datasets to avoid memory issues
rm(CPI)
rm(Tot_Pop)
rm(crimes)
# We rename some columns for easier handling
names(dat)[1:3] = c("Date", "CPI", "Tot_Pop")
# Now, we get additional derived metrics which might be helpful
inf_rate <- (dat$CPI)
crime_percentage <- dat$Total/dat$Tot_Pop * 100
dat <- cbind(dat, inf_rate, crime_percentage)
# Finally, we should remove outliers. For example, inflation for most years stays within 100%, except for some years, in which inflation reached over 500%.
mean_inf_rate <- mean(dat$inf_rate)
sd_inf_rate <- sd(dat$inf_rate)
# We will use only data that is within 3 standard deviations for the inflation rate
dat <- filter(dat, between(inf_rate, -3*sd_inf_rate, 3*sd_inf_rate))
head(dat, n = 5)
CPI_Plot <- ggplot(dat, aes(x = Date, y = CPI)) +
geom_line() +
labs(title = "Consumer Price Index Change", x = "Year", y = "CPI")
Property_Plot <- ggplot(dat, aes(x = Date, y = Property)) +
geom_line() +
labs(title = "Property Crime Over Time", x = "Year", y = "Number of Property Incidents")
Murder_Plot <- ggplot(dat, aes(x = Date, y = Murder)) +
geom_line() +
labs(title = "Murder Over Time", x = "Year", y = "Number of Murder Incidents")
Violent_Plot <- ggplot(dat, aes(x = Date, y = Violent)) +
geom_line() +
labs(title = "Violent Crime Over Time", x = "Year", y = "Number of Violebt Incidents")
Burglary_Plot <- ggplot(dat, aes(x = Date, y = Burglary)) +
geom_line() +
labs(title = "Burglary Over Time", x = "Year", y = "Total Number of Burglary Incidents")
Total_Plot <- ggplot(dat, aes(x = Date, y = Total)) +
geom_line() +
labs(title = "Total Crime Over Time", x = "Year", y = "Total Number of Incidents")
CPI_Plot
Property_Plot
Violent_Plot
Murder_Plot
Burglary_Plot
Total_Plot
# With the previously obtained information, we can visualize tot_crime vs inflation
#ggplot(data= dat, mapping = aes(x = inf_rate, y = Total))+
#  geom_point()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Total))+
geom_hline(yintercept = min(dat$Total),color="gray")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = crime_percentage))+
geom_hline(yintercept = min(dat$crime_percentage),color="gray")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Property))+
geom_hline(yintercept = min(dat$Property),color="gray")+
geom_vline(xintercept = mean(dat$inf_rate),color="red")+
geom_line()
ggplot(data= dat, mapping = aes(x = inf_rate, y = Property/Total))+
geom_hline(yintercept = min(dat$Property / dat$Total),color="gray")+
geom_line()
qqnorm(dat$CPI)
qqline(dat$CPI)
qqnorm(dat$Total)
qqline(dat$Total)
qqnorm(dat$Property)
qqline(dat$Property)
qqnorm(dat$Violent)
qqline(dat$Violent)
qqnorm(dat$Murder)
qqline(dat$Murder)
#Pearson Correlations with Raw Data
cor.test(dat$inf_rate, dat$Total)
cor.test(dat$inf_rate, dat$Property)
cor.test(dat$inf_rate, dat$Murder)
cor.test(dat$inf_rate, dat$Violent)
cor.test(dat$inf_rate, dat$Burglary)
convert_to_per_capita <- function(data) {
# Find the column index for the "Tot_Pop" column
pop_col <- grep("Tot_Pop", colnames(data))
# If no "Tot_Pop" column is found, return the original data
if (length(pop_col) == 0) {
return(data)
}
# Divide all columns after "Tot_Pop" by population and multiply by 100,000
for (i in (pop_col+1):ncol(data)) {
data[, i] <- (data[, i] / data[, pop_col]) * 100000
}
return(data)
}
dat_converted <- convert_to_per_capita(dat)
dat_converted
cor.test(dat$inf_rate, dat_converted$Total)
cor.test(dat$inf_rate, dat_converted$Property)
cor.test(dat$inf_rate, dat_converted$Murder)
cor.test(dat$inf_rate, dat_converted$Violent)
cor.test(dat$inf_rate, dat_converted$Burglary)
# Create a dataframe with the two variables
data <- data.frame(inf_rate = c(1.5, 2.0, 2.5, 2.2, 2.8),
property_crime = c(100, 120, 110, 115, 130))
# Specify the variables as a VAR model
model <- VAR(dat_converted, p = 2, type = "const")
grangertest(inf_rate ~ Property, order = 3, data = dat_converted)
grangertest(inf_rate ~ Burglary, order = 3, data = dat_converted)
grangertest(inf_rate ~ Total, order = 3, data = dat)
dat_converted
#Prophet requires the data to be formatted in a certain way.
#Create formatted dataframes for making predictions
df_model1 <- dat_converted[, c('Date', 'CPI', 'Property')]
colnames(df_model1) <- c('ds', 'CPI', 'y')
df_model1$ds <- as.Date(paste0(df_model1$ds, "-01-01"), format = "%Y-%m-%d")
df_model2 <- dat_converted[, c('Date', 'CPI', 'Total')]
colnames(df_model2) <- c('ds', 'CPI', 'y')
df_model2$ds <- as.Date(paste0(df_model2$ds, "-01-01"), format = "%Y-%m-%d")
model <- prophet()
#Use CPI as a regressor
model <- add_regressor(model, 'CPI')
model <- fit.prophet(model, df_model1)
future <- make_future_dataframe(model, periods = 9, freq = 'years')
future$CPI <- c(1.2, 7.0, 6.9, 5.0, 3.0, 4.0, 1.0, 0.2)
forecast <- predict(model, future)
forecast
plot(model, forecast)
model <- prophet()
# add CPI as a regressor
model <- add_regressor(model, 'CPI')
model <- fit.prophet(model, df_model2)
future <- make_future_dataframe(model, periods = 9, freq = 'years')
future$CPI <- c(1.2, 7.0, 6.9, 5.0, 3.0, 4.0, 6.0, 7.2)
forecast <- predict(model, future)
forecast
plot(model, forecast)
property_inf <- dat_converted[, c("Property", "CPI")]
model_inf <- VAR(property_inf, p = 3, type = "const")
forecast_inf <- predict(model_inf, n.ahead = 3, newdata = data.frame(inf_rate = c(1.0, 3.1, 7)))
forecast_inf
# We load our datasets, clean them and join them into a single dataframe, for easier handling
Tot_Pop <- read.csv("./TotalPopulation1960to2020.csv")
Tot_Pop$DATE <- as.numeric(format(as.Date(Tot_Pop$DATE), "%Y"))
CPI <- read.csv("./FPCPITOTLZGUSA.csv")
CPI$DATE <- as.numeric(format(as.Date(CPI$DATE), "%Y"))
crimes <- read.csv("./crimes.csv")
names(crimes)[11] = "Larceny theft"
names(crimes)[12] = "Vehicle theft"
crimes <- filter(crimes,Year <= 2019)
Tot_Pop <- filter(Tot_Pop,DATE <= 2019)
CPI <- filter(CPI,DATE <= 2019)
dat <- cbind(CPI, Tot_Pop$POPTOTUSA647NWDB, crimes[,3:ncol(crimes)])
# Now we can remove the original datasets to avoid memory issues
rm(CPI)
rm(Tot_Pop)
rm(crimes)
# We rename some columns for easier handling
names(dat)[1:3] = c("Date", "CPI", "Tot_Pop")
inf_rate <- (dat$CPI)
crime_percentage <- dat$Total/dat$Tot_Pop * 100
dat <- cbind(dat, inf_rate, crime_percentage)
# Finally, we should remove outliers. For example, inflation for most years stays within 100%, except for some years, in which inflation reached over 500%.
mean_inf_rate <- mean(dat$inf_rate)
sd_inf_rate <- sd(dat$inf_rate)
View(dat)
dat2 <- filter(dat, between(inf_rate, -3*sd_inf_rate, 3*sd_inf_rate))
View(dat2)
# We will use only data that is within 3 standard deviations for the inflation rate
dat <- filter(dat, between(inf_rate, -3*sd_inf_rate, 3*sd_inf_rate))
head(dat, n = 5)
CPI_Plot <- ggplot(dat, aes(x = Date, y = CPI)) +
geom_line() +
labs(title = "Consumer Price Index Change", x = "Year", y = "CPI")
CPI_Plot
CPI_Plot <- ggplot(dat, aes(x = Date, y = CPI)) +
geom_line() +
labs(title = "Consumer Price Index Change", x = "Year", y = "CPI")
Property_Plot <- ggplot(dat, aes(x = Date, y = Property)) +
geom_line() +
labs(title = "Property Crime Over Time", x = "Year", y = "Number of Property Incidents")
Murder_Plot <- ggplot(dat, aes(x = Date, y = Murder)) +
geom_line() +
labs(title = "Murder Over Time", x = "Year", y = "Number of Murder Incidents")
Violent_Plot <- ggplot(dat, aes(x = Date, y = Violent)) +
geom_line() +
labs(title = "Violent Crime Over Time", x = "Year", y = "Number of Violebt Incidents")
Burglary_Plot <- ggplot(dat, aes(x = Date, y = Burglary)) +
geom_line() +
labs(title = "Burglary Over Time", x = "Year", y = "Total Number of Burglary Incidents")
Total_Plot <- ggplot(dat, aes(x = Date, y = Total)) +
geom_line() +
labs(title = "Total Crime Over Time", x = "Year", y = "Total Number of Incidents")
CPI_Plot
Property_Plot
Violent_Plot
Murder_Plot
Burglary_Plot
Total_Plot
CPI_Plot
CPI_Plot
Property_Plot
Violent_Plot
Murder_Plot
Burglary_Plot
Total_Plot
qqnorm(dat$CPI)
qqline(dat$CPI)
qqnorm(dat$Total)
qqline(dat$Total)
qqnorm(dat$Property)
qqline(dat$Property)
qqnorm(dat$Violent)
qqline(dat$Violent)
qqnorm(dat$Murder)
qqline(dat$Murder)
#Pearson Correlations with Raw Data
cor.test(dat$inf_rate, dat$Total)
cor.test(dat$inf_rate, dat$Property)
cor.test(dat$inf_rate, dat$Murder)
cor.test(dat$inf_rate, dat$Violent)
cor.test(dat$inf_rate, dat$Burglary)
convert_to_per_capita <- function(data) {
# Find the column index for the "Tot_Pop" column
pop_col <- grep("Tot_Pop", colnames(data))
# If no "Tot_Pop" column is found, return the original data
if (length(pop_col) == 0) {
return(data)
}
# Divide all columns after "Tot_Pop" by population and multiply by 100,000
for (i in (pop_col+1):ncol(data)) {
data[, i] <- (data[, i] / data[, pop_col]) * 100000
}
return(data)
}
dat_converted <- convert_to_per_capita(dat)
dat_converted
cor.test(dat$inf_rate, dat_converted$Total)
cor.test(dat$inf_rate, dat_converted$Property)
cor.test(dat$inf_rate, dat_converted$Murder)
cor.test(dat$inf_rate, dat_converted$Violent)
cor.test(dat$inf_rate, dat_converted$Burglary)
View(dat_converted)
rm(dat2)
CPI_Plot2 <- ggplot(dat_converted, aes(x = Date, y = CPI)) +
geom_line() +
labs(title = "Consumer Price Index Change", x = "Year", y = "CPI")
CPI_Plot2
CPI_Plot
Property_Plot2 <- ggplot(dat_converted, aes(x = Date, y = Property)) +
geom_line() +
labs(title = "Property Crime Over Time", x = "Year", y = "Number of Property Incidents")
Property_Plot2
Property_Plot
Property_Plot2
ggplot(data= dat, mapping = aes(x = inf_rate, y = crime_percentage))+
geom_hline(yintercept = min(dat$crime_percentage),color="gray")+
geom_line()
?cor.test
